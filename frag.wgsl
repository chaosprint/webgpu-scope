
// Hello from WGSL again. We're back

// @fragment
// This attribute tells you that this is an entry point of a fragment shader
// This function will be called for every fragment in the rendering pipeline
@fragment
// 
// @location
// The location attribute specifies a part of the user-defined IO of an entry point.
// In this case, the output of this fragment shader is going to go a user-defined location 0
// This location index normally maps to a binding defined in the pipeline BindGroup, but in this
// example we're using a ('auto') default layout. Which means that the bindings are automatically
// generated by inferring them from the pipeline itself.
// Anyhow, I think this binding ends up in the texture view for the current texture in the <canvas>
// element
fn main() -> @location(0) vec4<f32> {

// Here we can see that for any input we always return the same vector
// which represents a solid yellow color in RGBA
return vec4<f32>(0.0, 1.0, 1.0, 1.0);
} 
